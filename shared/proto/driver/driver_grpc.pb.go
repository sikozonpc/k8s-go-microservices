// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: driver.proto

package driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverServiceClient interface {
	FindNearbyDrivers(ctx context.Context, opts ...grpc.CallOption) (DriverService_FindNearbyDriversClient, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) FindNearbyDrivers(ctx context.Context, opts ...grpc.CallOption) (DriverService_FindNearbyDriversClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[0], "/driver.DriverService/FindNearbyDrivers", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceFindNearbyDriversClient{stream}
	return x, nil
}

type DriverService_FindNearbyDriversClient interface {
	Send(*FindNearbyDriversRequest) error
	Recv() (*StreamDriversResponse, error)
	grpc.ClientStream
}

type driverServiceFindNearbyDriversClient struct {
	grpc.ClientStream
}

func (x *driverServiceFindNearbyDriversClient) Send(m *FindNearbyDriversRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverServiceFindNearbyDriversClient) Recv() (*StreamDriversResponse, error) {
	m := new(StreamDriversResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DriverServiceServer is the server API for DriverService service.
// All implementations must embed UnimplementedDriverServiceServer
// for forward compatibility
type DriverServiceServer interface {
	FindNearbyDrivers(DriverService_FindNearbyDriversServer) error
	mustEmbedUnimplementedDriverServiceServer()
}

// UnimplementedDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServiceServer struct {
}

func (UnimplementedDriverServiceServer) FindNearbyDrivers(DriverService_FindNearbyDriversServer) error {
	return status.Errorf(codes.Unimplemented, "method FindNearbyDrivers not implemented")
}
func (UnimplementedDriverServiceServer) mustEmbedUnimplementedDriverServiceServer() {}

// UnsafeDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServiceServer will
// result in compilation errors.
type UnsafeDriverServiceServer interface {
	mustEmbedUnimplementedDriverServiceServer()
}

func RegisterDriverServiceServer(s grpc.ServiceRegistrar, srv DriverServiceServer) {
	s.RegisterService(&DriverService_ServiceDesc, srv)
}

func _DriverService_FindNearbyDrivers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServiceServer).FindNearbyDrivers(&driverServiceFindNearbyDriversServer{stream})
}

type DriverService_FindNearbyDriversServer interface {
	Send(*StreamDriversResponse) error
	Recv() (*FindNearbyDriversRequest, error)
	grpc.ServerStream
}

type driverServiceFindNearbyDriversServer struct {
	grpc.ServerStream
}

func (x *driverServiceFindNearbyDriversServer) Send(m *StreamDriversResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverServiceFindNearbyDriversServer) Recv() (*FindNearbyDriversRequest, error) {
	m := new(FindNearbyDriversRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DriverService_ServiceDesc is the grpc.ServiceDesc for DriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindNearbyDrivers",
			Handler:       _DriverService_FindNearbyDrivers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "driver.proto",
}
